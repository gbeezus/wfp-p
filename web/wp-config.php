<?php
/**
 * This file is generated by WP Starter package, and contains base configuration of the WordPress.
 *
 * All the configuration constants used by WordPress are set via environment variables.
 * Default settings are provided in this file for most common settings, however database settings
 * are required, you can get them from your web host.
 *
 * @package WordPress
 */

use WeCodeMore\WpStarter\Env\WordPressEnvBridge;

/**
 * Set default environment.
 *
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
$envType = 'development';
// phpcs:enable

/**
 * Pantheon specific configuration.
 */
$pantheon_settings = __DIR__ . '/wp-config.pantheon.php';
if ( is_readable( $pantheon_settings ) ) {
	require_once $pantheon_settings;
}

// Define a default Production identifiers list.
$production_aliases = array(
	'production',
	'www',
	'live',
);
// Implode the array in order to allow for managing this global constant via .env.
defined( 'WP_PRODUCTION_ENVS' ) || define( 'WP_PRODUCTION_ENVS', implode( ',', $production_aliases ) );

// Define a default Staging identifiers list.
// This is a currently known/used set of environment "aliases" used to represent a staging environment.
$staging_aliases = array(
	'release',
	'stage',
	'staging',
	'stable',
	'test',
	'f1-main',
	'f1-release',
	'f1-stage',
	'f1-staging',
);
// Implode the array in order to allow for managing this global constant via .env.
defined( 'WP_STAGING_ENVS' ) || define( 'WP_STAGING_ENVS', implode( ',', $staging_aliases ) );

/**
 * WP Starter Debug Configuration
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
DEBUG_INFO_INIT: {
	$debugInfo = array();
} // @@/DEBUG_INFO_INIT
// phpcs:enable

/**
 * WP Starter PHP Absolute Path Configuration.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
ABSPATH: {
	/** Absolute path to the WordPress directory. */
	defined( 'ABSPATH' ) || define( 'ABSPATH', realpath( __DIR__ . '/wp' ) . '/' );

	/**
	 * Load plugin.php early, so we can call hooks from here on.
	 * E.g. in Composer-autoloaded "files".
	 */
	require_once ABSPATH . 'wp-includes/plugin.php';
} // @@/ABSPATH
// phpcs:enable

/**
 * WP Starter Autoload Configuration.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
AUTOLOAD: {
	// Composer autoload.
	require_once realpath( __DIR__ . '/wp-content/vendor/autoload.php' );

	define( 'WPSTARTER_PATH', realpath( __DIR__ . '/..' ) );

	$debugInfo['autoload-path'] = array(
		'label' => 'Autoload path',
		'value' => __DIR__ . '/wp-content/vendor/autoload.php',
		'debug' => __DIR__ . '/wp-content/vendor/autoload.php',
	);
	$debugInfo['base-path'] = array(
		'label' => 'Base path',
		'value' => WPSTARTER_PATH,
		'debug' => WPSTARTER_PATH,
	);
} // @@/AUTOLOAD
// phpcs:enable

/**
 * WP Starter Environment Variables Configuration.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
ENV_VARIABLES: {
	// If NOT on Pantheon.
	if ( ! isset( $_ENV['PANTHEON_ENVIRONMENT'] ) ) {
		// Include for ddev-managed settings in wp-config-ddev.php.
		$ddev_settings = dirname( __FILE__ ) . '/wp-config-ddev.php';
		if ( is_readable( $ddev_settings ) && ! defined( 'DB_USER' ) ) {
			require_once $ddev_settings;
		}
	}

	/**
	 * Define all WordPress constants from environment variables.
	 * Environment variables will be loaded from file, unless `WPSTARTER_ENV_LOADED` env var is already
	 * setup e.g. via webserver configuration.
	 * In that case all environment variables are assumed to be set.
	 * Environment variables that are set in the *real* environment (e.g. via webserver) will not be
	 * overridden from file, even if `WPSTARTER_ENV_LOADED` is not set.
	 */
	$envCacheEnabled = filter_var( '0', FILTER_VALIDATE_BOOLEAN );
	$envLoader = $envCacheEnabled
		? WordPressEnvBridge::buildFromCacheDump( WPSTARTER_PATH . WordPressEnvBridge::CACHE_DUMP_FILE )
		: new WordPressEnvBridge();

	$envIsCached = $envLoader->hasCachedValues();
	if ( ! $envIsCached ) {
		$envLoader->load( '.env', WPSTARTER_PATH );
		if ( ! isset( $_ENV['PANTHEON_ENVIRONMENT'] ) ) {
			$envType = $envLoader->determineEnvType();
			if ( $envType !== 'example' ) {
				$envLoader->loadAppended( ".env.{$envType}", WPSTARTER_PATH );
			}
		}

		/**
		 * We default to a Development-class configuration set. (NOTE: Any .env file settings will override these.)
		 */
		switch ( true ) {
			case ( in_array( $envType, explode( ',', WP_PRODUCTION_ENVS ), true ) ):
				defined( 'WP_ENV' ) || define( 'WP_ENV', 'production' );
				defined( 'WP_ENVIRONMENT_TYPE' ) || define( 'WP_ENVIRONMENT_TYPE', 'production' );
				break;
			case ( in_array( $envType, explode( ',', WP_STAGING_ENVS ), true ) ):
				defined( 'WP_ENV' ) || define( 'WP_ENV', 'staging' );
				defined( 'WP_ENVIRONMENT_TYPE' ) || define( 'WP_ENVIRONMENT_TYPE', 'staging' );
				break;
			default:
				defined( 'WP_ENV' ) || define( 'WP_ENV', 'development' );
				defined( 'WP_ENVIRONMENT_TYPE' ) || define( 'WP_ENVIRONMENT_TYPE', 'development' );
				break;
		}

		$envLoader->setupConstants();
	}

	isset( $envType ) || $envType = $envLoader->determineEnvType();

	$debugInfo['env-cache-file'] = array(
		'label' => 'Env cache file',
		'value' => WPSTARTER_PATH . WordPressEnvBridge::CACHE_DUMP_FILE,
		'debug' => WPSTARTER_PATH . WordPressEnvBridge::CACHE_DUMP_FILE,
	);
	$debugInfo['env-cache-enabled'] = array(
		'label' => 'Env cache enabled',
		'value' => $envCacheEnabled ? 'Yes' : 'No',
		'debug' => $envCacheEnabled,
	);
	$debugInfo['cached-env'] = array(
		'label' => 'Is env loaded from cache',
		'value' => $envIsCached ? 'Yes' : 'No',
		'debug' => $envIsCached,
	);
	$debugInfo['env-type'] = array(
		'label' => 'Env type',
		'value' => $envType,
		'debug' => $envType,
	);

	unset( $envCacheEnabled, $envIsCached );

	/**
	 * Core wp_get_environment_type() only supports a pre-defined list of environments types.
	 * WP Starter tries to map different environments to values supported by core, for example
	 * "dev" (or "develop", or even "develop-1") will be mapped to "development" accepted by WP.
	 * In that case, `wp_get_environment_type()` will return "development", but `WP_ENV` will still
	 * be "dev" (or "develop", or "develop-1").
	 */
	defined( 'WP_ENV' ) || define( 'WP_ENV', $envType );

	$phpEnvFilePath = WPSTARTER_PATH . "/{$envType}.php";
	$hasPhpEnvFile = file_exists( $phpEnvFilePath ) && is_readable( $phpEnvFilePath );
	if ( $hasPhpEnvFile ) {
		require_once WPSTARTER_PATH . "/{$envType}.php";
	}
	$debugInfo['env-php-file'] = array(
		'label' => 'Env-specific PHP file',
		'value' => $hasPhpEnvFile ? WPSTARTER_PATH . "/{$envType}.php" : 'None',
		'debug' => $hasPhpEnvFile ? WPSTARTER_PATH . "/{$envType}.php" : '',
	);
	unset( $phpEnvFilePath, $hasPhpEnvFile );

} // @@/ENV_VARIABLES
// phpcs:enable

/**
 * WP Starter Authentication Keys Configuration.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
KEYS: {
	/*
	 * If NOT on Pantheon
	 */
	if ( ! isset( $_ENV['PANTHEON_ENVIRONMENT'] ) ) {
		/**
		 * Set unique authentication keys if not already set via environment variables.
		 */
		define( 'AUTH_KEY',         'fnO5jue/2-}= -R<ngLMBp90|b~4JYJd|p{Py%8UxD>g2L7]-&2z_NV Dfb[>G34' );
		define( 'SECURE_AUTH_KEY',  'GH{=}@,eDEL]Z=7NJtEE)-*yk|L?JCks<{K}G(j4S~Ay/WMshVc$Z@W~S=%~q55L' );
		define( 'LOGGED_IN_KEY',    'lVtt|Ik|7.kRWL*<M=uDw^R1E6=1K?@l2&[f+R%c&#(?qYG<OeQ;87Yxxs{v*!(m' );
		define( 'NONCE_KEY',        '#|dus54A=&<nE?E2?5,;_z^O](YOp)|%_z||#K:I!dJtFi6d[-j>AB]AEW++He$z' );
		define( 'AUTH_SALT',        'Wqp8UNKk]4G7aH#a^D^kIJ$MZk;Noq-(f?LMSLBz D_<4&5/k>tU!gj<0Rg={]U-' );
		define( 'SECURE_AUTH_SALT', 'pQzz1:ldI8JhBRC5Lo$yR@HF_r2XRD!QpVl*H*g+JTB?O6fJ]y#<m=Bl],NR:R%y' );
		define( 'LOGGED_IN_SALT',   'k W5gig+ |?}ndx/@+:Y+wDv7.?SL;j:UH(fSfrv]7ClVOYpqs0J*T.Uhr<^O*!w' );
		define( 'NONCE_SALT',       '}.jc{;u([$s]2@D(yE9-7-4L8Dhh|GA$Iyl$Q0O[4dq]]Re8+Y$tn,;!SPm+Bh(O' );
	}
} // @@/KEYS
// phpcs:enable

/**
 * WP Starter Database Configuration.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
DB_SETUP : {
	/** Set optional database settings if not already set. */
	if ( getenv( 'IS_DDEV_PROJECT' ) === false ) {
		defined( 'DB_HOST' ) || define( 'DB_HOST', 'localhost' );
	}
	defined( 'DB_CHARSET' ) || define( 'DB_CHARSET', 'utf8' );
	defined( 'DB_COLLATE' ) || define( 'DB_COLLATE', '' );

	/**
	 * WordPress Database Table prefix.
	 */
	global $table_prefix;
	$table_prefix = $envLoader->read( 'DB_TABLE_PREFIX' ) ?: 'wp_';
} // @@/DB_SETUP
// phpcs:enable

/**
 * WP Starter Early Hooks Configuration.
 *
 * Load early hooks file if any.
 * Early hooks file allows adding hooks that are triggered before plugins are loaded, e.g.
 * "enable_loading_advanced_cache_dropin" or to just-in-time define configuration constants.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
EARLY_HOOKS : {
	$earlyHookFile = ''
		&& file_exists( __DIR__ . '' )
		&& is_readable( __DIR__ . '' );
	if ( $earlyHookFile ) {
		require_once __DIR__ . '';
	}
	$debugInfo['early-hooks-file'] = array(
		'label' => 'Early hooks file',
		'value' => $earlyHookFile ? __DIR__ . '' : 'None',
		'debug' => $earlyHookFile ? __DIR__ . '' : '',
	);
	unset( $earlyHookFile );
} // @@/EARLY_HOOKS
// phpcs:enable

/**
 * WP Starter Default Environment Configuration.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
DEFAULT_ENV : {
	/** Environment-aware settings. Be creative, but avoid having sensitive settings here. */
	/**
	 * We default to a Development-class configuration set. (NOTE: Any .env file settings will override these.)
	 */
	switch ( WP_ENVIRONMENT_TYPE ) {
		case 'production':
			defined( 'WP_DEBUG' ) || define( 'WP_DEBUG', false );
			defined( 'WP_DEBUG_DISPLAY' ) || define( 'WP_DEBUG_DISPLAY', false );
			defined( 'WP_DEBUG_LOG' ) || define( 'WP_DEBUG_LOG', false );
			defined( 'SAVEQUERIES' ) || define( 'SAVEQUERIES', false );
			defined( 'SCRIPT_DEBUG' ) || define( 'SCRIPT_DEBUG', false );
			break;
		case 'staging':
			defined( 'WP_DEBUG' ) || define( 'WP_DEBUG', true );
			defined( 'WP_DEBUG_DISPLAY' ) || define( 'WP_DEBUG_DISPLAY', false );
			defined( 'WP_DEBUG_LOG' ) || define( 'WP_DEBUG_LOG', true );
			defined( 'SAVEQUERIES' ) || define( 'SAVEQUERIES', false );
			defined( 'SCRIPT_DEBUG' ) || define( 'SCRIPT_DEBUG', true );
			break;
		default:
			defined( 'WP_DEBUG' ) || define( 'WP_DEBUG', true );
			defined( 'WP_DEBUG_DISPLAY' ) || define( 'WP_DEBUG_DISPLAY', true );
			defined( 'WP_DEBUG_LOG' ) || define( 'WP_DEBUG_LOG', false );
			defined( 'SAVEQUERIES' ) || define( 'SAVEQUERIES', true );
			defined( 'SCRIPT_DEBUG' ) || define( 'SCRIPT_DEBUG', true );
			defined( 'WP_DISABLE_FATAL_ERROR_HANDLER' ) || define( 'WP_DISABLE_FATAL_ERROR_HANDLER', true );
			break;
	}

	$debugInfo['wp-env-type'] = array(
		'label' => 'WordPress env type (used for defaults)',
		'value' => WP_ENVIRONMENT_TYPE,
		'debug' => WP_ENVIRONMENT_TYPE,
	);
} // @@/DEFAULT_ENV
// phpcs:enable

/**
 * WP Starter SSL Fixes Setup.
 *
 * @link https://core.trac.wordpress.org/ticket/31288
 *
 * phpcs:disable WordPress.Security.ValidatedSanitizedInput.InputNotSanitized
 * phpcs:disable WordPress.Security.ValidatedSanitizedInput.MissingUnslash
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
SSL_FIX : {
	$doSslFix = $envLoader->read( 'WP_FORCE_SSL_FORWARDED_PROTO' )
		&& array_key_exists( 'HTTP_X_FORWARDED_PROTO', $_SERVER )
		&& strtolower( $_SERVER['HTTP_X_FORWARDED_PROTO'] ) === 'https';
	$doSslFix and $_SERVER['HTTPS'] = 'on';
	$debugInfo['ssl_fix'] = array(
		'label' => 'SSL fix for load balancers',
		'value' => $doSslFix ? 'Yes' : 'No',
		'debug' => $doSslFix,
	);
	unset( $doSslFix );
} // @@/SSL_FIX
// phpcs:enable

/**
 * WP Starter URL Related Constants Configuration.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
URL_CONSTANTS : {
	if ( ! defined( 'WP_HOME' ) ) {
		$home = filter_var( $_SERVER['HTTPS'] ?? '', FILTER_VALIDATE_BOOLEAN ) ? 'https://' : 'http://';
		$home .= $_SERVER['SERVER_NAME'] ?? 'wordpress-faustjs-project.ddev.site';
		$port = $_SERVER['SERVER_PORT'] ?? '';
		( is_numeric( $port ) && (int) $port > 0 ) and $home .= sprintf( ':%d', $port );
		define( 'WP_HOME', $home );
		unset( $home );
	}

	/** Set WordPress other URL / path constants not set via environment variables. */
	defined( 'WP_SITEURL' ) || define( 'WP_SITEURL', rtrim( WP_HOME, '/' ) . '/wp' );
	defined( 'WP_CONTENT_DIR' ) || define( 'WP_CONTENT_DIR', realpath( __DIR__ . '/wp-content' ) );
	defined( 'WP_CONTENT_URL' ) || define( 'WP_CONTENT_URL', rtrim( WP_HOME, '/' ) . '/wp-content' );
} // @@/URL_CONSTANTS
// phpcs:enable

/**
 * WP Starter Themes Registration Configuration.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
THEMES_REGISTER : {
	/** Register default themes inside WordPress package wp-content folder. */
	$registerThemeFolder = filter_var( 'false', FILTER_VALIDATE_BOOLEAN );
	$registerThemeFolder and add_action(
		'plugins_loaded',
		static function () {
			register_theme_directory( ABSPATH . 'wp-content/themes' );
		}
	);
	$debugInfo['register-core-themes'] = array(
		'label' => 'Register core themes folder',
		'value' => $registerThemeFolder,
		'debug' => 'false',
	);
	unset( $registerThemeFolder );
} // @@/THEMES_REGISTER
// phpcs:enable

/**
 * WP Starter Admin Colors Configuration.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
ADMIN_COLOR : {
	/** Allow changing admin color scheme. Useful to distinguish environments in the dashboard. */
	add_filter(
		'get_user_option_admin_color',
		static function ( $color ) use ( $envLoader ) {
			return $envLoader->read( 'WP_ADMIN_COLOR' ) ?: $color;
		},
		999
	);
} // @@/ADMIN_COLOR
// phpcs:enable

/**
 * WP Starter Environment Cache Configuration.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
ENV_CACHE : {
	/** On shutdown, we dump environment so that on subsequent requests we can load it faster */
	if ( '0' && $envLoader->isWpSetup() ) {
		register_shutdown_function(
			static function () use ( $envLoader, $envType ) {
				$isLocal = $envType === 'local';
				if ( ! apply_filters( 'wpstarter.skip-cache-env', $isLocal, $envType ) ) {
					$envLoader->dumpCached( WPSTARTER_PATH . WordPressEnvBridge::CACHE_DUMP_FILE );
				}
			}
		);
	}
} // @@/ENV_CACHE
// phpcs:enable

/**
 * WP Starter Add Debugging Information.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
DEBUG_INFO : {
	add_filter(
		'debug_information',
		static function ( $info ) use ( $debugInfo ): array {
			is_array( $info ) || $info = array();
			$info['wp-starter'] = array(
				'label' => 'WP Starter',
				'fields' => $debugInfo,
			);

			return $info;
		},
		30
	);
} // @@/DEBUG_INFO
// phpcs:enable

/**
 * WP Starter Get Environment Variable Function Setup.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
GETENV_FILTER : {
	/**
	 * A filter that can be used in place of `getenv` to get environment variables with benefits of
	 * cache and filtering. Example: <code>$some_var = apply_filters('getenv', 'SOME_VAR');</code>
	 */
	add_filter(
		'getenv',
		static function ( $name ) use ( $envLoader ) {
			return ( $name && is_string( $name ) ) ? $envLoader->read( $name ) : null;
		},
		PHP_INT_MAX
	);
} // @@/GETENV_FILTER
// phpcs:enable

/**
 * WP Starter Pre-Bootstrap Calls.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
BEFORE_BOOTSTRAP : {
	/** A pre-defined section to extend configuration. */

	// Ensure backwards compatible environment constants are setup for things like themes & plugins.
	array_walk(
		$_ENV,
		function ( $value, $name ) {
			defined( $name ) || define( $name, $value );
		}
	);
} // @@/BEFORE_BOOTSTRAP
// phpcs:enable

/**
 * WP Starter Clean-up Routines.
 *
 * phpcs:disable Generic.PHP.DiscourageGoto.Found
 * phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
 */
CLEAN_UP : {
	unset( $debugInfo, $envType, $envLoader );
} // @@/CLEAN_UP

/* That's all, stop editing! Happy blogging. */

/**
 * Sets up WordPress vars and included files.
 */
require_once ABSPATH . '/wp-settings.php';
